#!/bin/bash
#
# Init repo's ci configuration with template, include Makefile, Dockfile and Jenkinsfile in devops directory

readonly REPO_NAME=$1
readonly REPO_TYPE=$2

# TODO: 使用实际值，或者使用命令行参数
readonly REPO_ACCOUNT="sanguomao"
readonly JENKINS_CREDENTIALSID="devops-longguikeji-github-token"

help() {
  echo """
  Script execute failed.
  Usage:
  For example:
      Repo URL: https://github.com/rockl2e/devops.git
      Repo type: ts or python
      Run command below to init ci configure:
      ./ci_init devops python
  """
}

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
  help
}

initMakefile() {
  sed "s/template_repo_name/${REPO_NAME}/g" devops.template/Makefile > Makefile
  if [ ${REPO_TYPE} == 'ts' ]; then
    sed -i "" "s/lint-template/npx lint-staged/" Makefile
    sed -i "" "s/test-template/npm run test:unit/" Makefile
  elif [ ${REPO_TYPE} == 'python' ]; then
    sed -i "" "s/lint-template/.git\/hooks\/pre-commit/" Makefile
    sed -i "" "s/test-template/python manage.py migrate \&\& python manage.py test siteapi.v1.tests/" Makefile
  else
    err "Repo type not supported. Please use ts or python."
    cleanup
    exit -1
  fi
}

initDockerfile() {
  if [ ${REPO_TYPE} == 'ts' ]; then
    cp devops.template/Dockerfile.ts Dockerfile
  elif [ ${REPO_TYPE} == 'python' ]; then
    cp devops.template/Dockerfile.python Dockerfile
  else
    err "Repo type not supported. Please use ts or python."
    cleanup
    exit -1
  fi
}

initJenkinsfile() {
  mkdir devops
  cp devops.template/Jenkinsfile.* devops/
  sed -i "" "s/template_repo_name/${REPO_NAME}/g" devops/Jenkinsfile.release
}

createCIInitBranch() {
  git clone https://github.com/${REPO_ACCOUNT}/${REPO_NAME}.git
  cd ${REPO_NAME}
  git checkout -b ci_init
  cp ../Dockerfile .
  cp -r ../devops .
  cp ../Makefile .
  git add .
  git commit -m 'auto init ci config'
  git push origin ci_init:ci_init
  cd ..
}

createJob() {
  # TODO：使用真实ci的url, auth信息
  curl -X POST http://localhost:8005/createItem?name=${REPO_NAME}.$1 \
    --data-binary "@config.xml" -H "Content-Type: text/xml" -u admin:admin
}

createJenkinsJobs() {
  sed -e "s/template_project_url/https:\/\/github.com\/${REPO_ACCOUNT}\/${REPO_NAME}\//" \
  -e "s/template_credentials_id/${JENKINS_CREDENTIALSID}/" \
  -e "s/template_repo_url/https:\/\/github.com\/${REPO_ACCOUNT}\/${REPO_NAME}.git/" \
  -e "s/template_branch_name/\*\*/" \
  -e "s/template_jenkinsfile_path/devops\/Jenkinsfile.status/" \
  devops.template/config.xml > config.xml

  createJob status

  sed -e "s/template_project_url/https:\/\/github.com\/${REPO_ACCOUNT}\/${REPO_NAME}\//" \
  -e "s/template_credentials_id/${JENKINS_CREDENTIALSID}/" \
  -e "s/template_repo_url/https:\/\/github.com\/${REPO_ACCOUNT}\/${REPO_NAME}.git/" \
  -e "s/template_branch_name/master/" \
  -e "s/template_jenkinsfile_path/devops\/Jenkinsfile.build/" \
  devops.template/config.xml > config.xml

  createJob build

  sed -e "s/template_project_url/https:\/\/github.com\/${REPO_ACCOUNT}\/${REPO_NAME}\//" \
  -e "s/template_credentials_id/${JENKINS_CREDENTIALSID}/" \
  -e "s/template_repo_url/https:\/\/github.com\/${REPO_ACCOUNT}\/${REPO_NAME}.git/" \
  -e "s/template_branch_name/master/" \
  -e "s/template_jenkinsfile_path/devops\/Jenkinsfile.release/" \
  devops.template/config.release.xml > config.xml

  createJob release
}

cleanup() {
  rm -f Dockerfile
  rm -rf devops/
  rm -f Makefile
  rm -rf ${REPO_NAME}
  rm -f config.xml
}

if [[ $# < 2 ]]; then
  err "Params number invalid."
  exit -1
fi

initMakefile
initDockerfile
initJenkinsfile
createCIInitBranch
createJenkinsJobs
cleanup




